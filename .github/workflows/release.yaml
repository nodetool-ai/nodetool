name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  pypi-publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: FedericoCarboni/setup-ffmpeg@v3
        id: setup-ffmpeg
        with:
          # ffmpeg-version: release
          ffmpeg-version: "6.1.0" # Pinning a specific version to avoid fetch failures

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build
        run: poetry build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  pack-conda-env:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    env:
      PYTHON_VERSION: "3.11"

    runs-on: ${{ matrix.os }}
    steps:
      - name: Free Disk Space
        if: matrix.os == 'ubuntu-latest'
        uses: jlumbroso/free-disk-space@main

      - uses: actions/checkout@v3

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          miniconda-version: "latest"
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Pack Conda Environment
        shell: bash -l {0}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1
        run: |
          python build.py --step pack --python-version ${{ env.PYTHON_VERSION }}

  release-build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    env:
      PYTHON_VERSION: "3.1a"
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # - name: Import Code Signing Certificate
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     echo "${{ secrets.WIN_CSC_CERT }}" > certificate.b64
      #     certutil -decode certificate.b64 certificate.pfx
      #   env:
      #     WIN_CSC_CERT: ${{ secrets.WIN_CSC_CERT }}
      #
      - name: Build Web
        shell: bash -l {0}
        run: |
          python build.py --step web --python-version ${{ env.PYTHON_VERSION }}

      - name: Build Electron
        shell: bash -l {0}
        env:
          # CSC_LINK: ./certificate.pfx
          # CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder
        run: |
          python build.py --step electron --python-version ${{ env.PYTHON_VERSION }}

      # - name: Create Release
      #   id: create_release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: |
      #       build/dist/Nodetool Setup*.exe
      #       build/dist/latest.yml
      #     draft: false
      #     prerelease: false
      #     token: ${{ secrets.GITHUB_TOKEN }}
