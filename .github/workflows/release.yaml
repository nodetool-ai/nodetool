name: PyPi and Conda Release

on:
  push:
    tags:
      - "v*"

jobs:
  release-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: FedericoCarboni/setup-ffmpeg@v3
        id: setup-ffmpeg
        with:
          # ffmpeg-version: release
          ffmpeg-version: "6.1.0" # Pinning a specific version to avoid fetch failures
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Build
        run: poetry build
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  # pypi-publish:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - release-build
  #   permissions:
  #     id-token: write

  #   steps:
  #     - name: Retrieve release distributions
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: release-dists
  #         path: dist/

  #     - name: Publish release distributions to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1

  conda-publish:
    needs: release-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-activate-base: true
          python-version: "3.11"

      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Install conda-build and conda-index
        shell: bash -l {0}
        run: |
          conda install -y conda-build conda-index

      - name: Build conda package
        shell: bash -l {0}
        run: |
          # Extract version from the wheel filename
          VERSION=$(git describe --tags --abbrev=0)
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          echo "Package version: $VERSION"

          # Get absolute path of wheel file and verify it exists
          WHEEL_FILE=$(realpath dist/*.whl)
          echo "Wheel file absolute path: $WHEEL_FILE"

          if [ ! -f "$WHEEL_FILE" ]; then
            echo "Error: Wheel file not found in dist directory"
            ls -la $(dirname "$WHEEL_FILE")
            exit 1
          fi

          # Create conda recipe directory
          mkdir -p conda-recipe

          # Create meta.yaml with correct wheel path
          cat > conda-recipe/meta.yaml << EOF
          {% set version = "$VERSION" %}

          package:
            name: nodetool
            version: {{ version }}

          source:
            path: $WHEEL_FILE

          build:
            noarch: python
            script: pip install $WHEEL_FILE
            number: 0

          requirements:
            host:
              - python
              - pip
            run:
              - python
              # Dependencies will be automatically handled by pip during install

          about:
            home: https://github.com/nodetool-ai/nodetool
            license: AGPL-3.0
            summary: Creative AI Playground
          EOF

          # Build the conda package
          conda build conda-recipe --output-folder channel/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Create channel index
        shell: bash -l {0}
        run: |
          # Create platform directories (if they don't exist)
          mkdir -p channel/noarch

          # No need to move files since conda-build already puts them in the right place

          # Create channel index
          conda-index channel/

      - name: Sync to S3
        run: |
          # Sync the entire channel directory to S3
          aws s3 sync channel/ s3://nodetool-conda/ --delete
