/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/assets/": {
    /**
     * Index
     * @description Returns all assets for a given user or workflow.
     */
    get: operations["index_api_assets__get"];
    /**
     * Create
     * @description Create a new asset.
     */
    post: operations["create_api_assets__post"];
  };
  "/api/assets/{id}": {
    /**
     * Get
     * @description Returns the asset for the given id.
     */
    get: operations["get_api_assets__id__get"];
    /**
     * Update
     * @description Updates the asset for the given id.
     */
    put: operations["update_api_assets__id__put"];
    /**
     * Delete
     * @description Deletes the asset for the given id. If the asset is a folder, it deletes all contents recursively.
     */
    delete: operations["delete_api_assets__id__delete"];
  };
  "/api/assets/download": {
    /**
     * Download Assets
     * @description Create a ZIP file containing the requested assets and return it for download.
     * Maintains folder structure based on asset.parent_id relationships.
     */
    post: operations["download_assets_api_assets_download_post"];
  };
  "/api/assets/{folder_id}/recursive": {
    /**
     * Get Assets Recursive
     * @description Get all assets in a folder recursively, including the folder structure.
     */
    get: operations["get_assets_recursive_api_assets__folder_id__recursive_get"];
  };
  "/api/jobs/{id}": {
    /**
     * Get
     * @description Returns the status of a job.
     */
    get: operations["get_api_jobs__id__get"];
    /**
     * Update
     * @description Update a job.
     */
    put: operations["update_api_jobs__id__put"];
  };
  "/api/jobs/": {
    /**
     * Index
     * @description Returns all assets for a given user or workflow.
     */
    get: operations["index_api_jobs__get"];
    /** Create */
    post: operations["create_api_jobs__post"];
  };
  "/api/jobs/run": {
    /** Run */
    post: operations["run_api_jobs_run_post"];
  };
  "/api/auth/oauth/login": {
    /** Oauth Login */
    post: operations["oauth_login_api_auth_oauth_login_post"];
  };
  "/api/auth/oauth/callback": {
    /** Oauth Callback */
    post: operations["oauth_callback_api_auth_oauth_callback_post"];
  };
  "/api/auth/verify": {
    /** Verify */
    post: operations["verify_api_auth_verify_post"];
  };
  "/api/messages/": {
    /** Index */
    get: operations["index_api_messages__get"];
    /** Create */
    post: operations["create_api_messages__post"];
  };
  "/api/messages/help": {
    /** Help */
    post: operations["help_api_messages_help_post"];
  };
  "/api/messages/{message_id}": {
    /** Get */
    get: operations["get_api_messages__message_id__get"];
  };
  "/api/models/recommended_models": {
    /** Recommended Models */
    get: operations["recommended_models_api_models_recommended_models_get"];
  };
  "/api/models/huggingface_models": {
    /** Get Huggingface Models */
    get: operations["get_huggingface_models_api_models_huggingface_models_get"];
  };
  "/api/models/huggingface_model": {
    /** Delete Huggingface Model */
    delete: operations["delete_huggingface_model_api_models_huggingface_model_delete"];
  };
  "/api/models/ollama_models": {
    /** Get Ollama Models */
    get: operations["get_ollama_models_api_models_ollama_models_get"];
  };
  "/api/models/huggingface/try_cache_files": {
    /** Try Cache Files */
    post: operations["try_cache_files_api_models_huggingface_try_cache_files_post"];
  };
  "/api/models/ollama_model_info": {
    /** Get Ollama Model Info */
    get: operations["get_ollama_model_info_api_models_ollama_model_info_get"];
  };
  "/api/models/pull_ollama_model": {
    /** Pull Ollama Model */
    post: operations["pull_ollama_model_api_models_pull_ollama_model_post"];
  };
  "/api/models/system_stats": {
    /** Get System Stats */
    get: operations["get_system_stats_api_models_system_stats_get"];
  };
  "/api/models/huggingface/file_info": {
    /** Get Huggingface File Info */
    post: operations["get_huggingface_file_info_api_models_huggingface_file_info_post"];
  };
  "/api/models/{model_type}": {
    /** Index */
    get: operations["index_api_models__model_type__get"];
  };
  "/api/nodes/dummy": {
    /**
     * Dummy
     * @description Returns a dummy node.
     */
    get: operations["dummy_api_nodes_dummy_get"];
  };
  "/api/nodes/metadata": {
    /**
     * Metadata
     * @description Returns a list of all node metadata.
     */
    get: operations["metadata_api_nodes_metadata_get"];
  };
  "/api/nodes/replicate_status": {
    /**
     * Replicate Status
     * @description Returns the status of the Replicate model.
     */
    get: operations["replicate_status_api_nodes_replicate_status_get"];
  };
  "/api/predictions/": {
    /**
     * Index
     * @description Returns all assets for a given user or workflow.
     */
    get: operations["index_api_predictions__get"];
    /** Create */
    post: operations["create_api_predictions__post"];
  };
  "/api/predictions/{id}": {
    /** Get */
    get: operations["get_api_predictions__id__get"];
  };
  "/api/workflows/": {
    /** Index */
    get: operations["index_api_workflows__get"];
    /** Create */
    post: operations["create_api_workflows__post"];
  };
  "/api/workflows/public": {
    /** Public */
    get: operations["public_api_workflows_public_get"];
  };
  "/api/workflows/public/{id}": {
    /** Get Public Workflow */
    get: operations["get_public_workflow_api_workflows_public__id__get"];
  };
  "/api/workflows/user/{user_id}": {
    /** User Workflows */
    get: operations["user_workflows_api_workflows_user__user_id__get"];
  };
  "/api/workflows/examples": {
    /** Examples */
    get: operations["examples_api_workflows_examples_get"];
  };
  "/api/workflows/{id}": {
    /** Get Workflow */
    get: operations["get_workflow_api_workflows__id__get"];
    /** Update Workflow */
    put: operations["update_workflow_api_workflows__id__put"];
    /** Delete Workflow */
    delete: operations["delete_workflow_api_workflows__id__delete"];
  };
  "/api/workflows/examples/{id}": {
    /** Save Example Workflow */
    put: operations["save_example_workflow_api_workflows_examples__id__put"];
  };
  "/api/storage/{bucket}/{key}": {
    /**
     * Get
     * @description Returns the file as a stream for the given key, supporting range queries.
     */
    get: operations["get_api_storage__bucket___key__get"];
    /**
     * Update
     * @description Updates or creates the file for the given key.
     */
    put: operations["update_api_storage__bucket___key__put"];
    /**
     * Delete
     * @description Deletes the asset for the given key.
     */
    delete: operations["delete_api_storage__bucket___key__delete"];
    /**
     * Head
     * @description Returns the metadata for the file with the given key.
     */
    head: operations["head_api_storage__bucket___key__head"];
  };
  "/api/tasks/": {
    /**
     * Index
     * @description Returns all tasks for the current user, optionally filtered by status.
     */
    get: operations["index_api_tasks__get"];
    /**
     * Create
     * @description Creates a new task.
     */
    post: operations["create_api_tasks__post"];
  };
  "/api/tasks/{id}": {
    /**
     * Get
     * @description Returns the task with the given id.
     */
    get: operations["get_api_tasks__id__get"];
    /**
     * Update
     * @description Updates the task with the given id.
     */
    put: operations["update_api_tasks__id__put"];
    /**
     * Delete
     * @description Deletes the task with the given id.
     */
    delete: operations["delete_api_tasks__id__delete"];
  };
  "/api/settings/": {
    /** Get Settings */
    get: operations["get_settings_api_settings__get"];
    /** Update Settings */
    put: operations["update_settings_api_settings__put"];
  };
  "/health": {
    /** Health Check */
    get: operations["health_check_health_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Asset */
    Asset: {
      /** Id */
      id: string;
      /** User Id */
      user_id: string;
      /** Workflow Id */
      workflow_id: string | null;
      /** Parent Id */
      parent_id: string;
      /** Name */
      name: string;
      /** Content Type */
      content_type: string;
      /** Metadata */
      metadata?: Record<string, never> | null;
      /** Created At */
      created_at: string;
      /** Get Url */
      get_url: string | null;
      /** Thumb Url */
      thumb_url: string | null;
      /** Duration */
      duration?: number | null;
    };
    /** AssetDownloadRequest */
    AssetDownloadRequest: {
      /** Asset Ids */
      asset_ids: string[];
    };
    /** AssetList */
    AssetList: {
      /** Next */
      next: string | null;
      /** Assets */
      assets: components["schemas"]["Asset"][];
    };
    /** AssetRef */
    AssetRef: {
      /**
       * Type
       * @default asset
       */
      type?: string;
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Data */
      data?: string | string[] | null;
    };
    /** AssetUpdateRequest */
    AssetUpdateRequest: {
      /** Name */
      name: string | null;
      /** Parent Id */
      parent_id: string | null;
      /** Content Type */
      content_type: string | null;
      /** Data */
      data?: string | null;
      /** Metadata */
      metadata?: Record<string, never> | null;
      /** Duration */
      duration?: number | null;
    };
    /** AudioRef */
    AudioRef: {
      /**
       * Type
       * @default audio
       * @constant
       * @enum {string}
       */
      type?: "audio";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Data */
      data?: string | string[] | null;
    };
    /** AuthRequest */
    AuthRequest: {
      /** Token */
      token: string;
    };
    /** Body_create_api_assets__post */
    Body_create_api_assets__post: {
      /** File */
      file?: string | null;
      /** Json */
      json?: string | null;
    };
    /** CachedModel */
    CachedModel: {
      /** Repo Id */
      repo_id: string;
      /** Repo Type */
      repo_type: string;
      /** Size On Disk */
      size_on_disk: number;
      /** The Model Type */
      the_model_type?: string | null;
      the_model_info?: components["schemas"]["ModelInfo"] | null;
      /** Readme */
      readme?: string | null;
    };
    /** ColumnDef */
    ColumnDef: {
      /** Name */
      name: string;
      /** Data Type */
      data_type: "int" | "float" | "datetime" | "string" | "object";
      /**
       * Description
       * @default
       */
      description?: string;
    };
    /** DataframeRef */
    DataframeRef: {
      /**
       * Type
       * @default dataframe
       * @constant
       * @enum {string}
       */
      type?: "dataframe";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Data */
      data?: unknown[][] | null;
      /** Columns */
      columns?: components["schemas"]["ColumnDef"][] | null;
    };
    /** Edge */
    Edge: {
      /** Id */
      id?: string | null;
      /** Source */
      source: string;
      /** Sourcehandle */
      sourceHandle: string;
      /** Target */
      target: string;
      /** Targethandle */
      targetHandle: string;
      /** Ui Properties */
      ui_properties?: {
        [key: string]: string;
      } | null;
    };
    /** FolderRef */
    FolderRef: {
      /**
       * Type
       * @default folder
       * @constant
       * @enum {string}
       */
      type?: "folder";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Data */
      data?: string | string[] | null;
    };
    /** Graph */
    Graph: {
      /** Nodes */
      nodes: components["schemas"]["Node"][];
      /** Edges */
      edges: components["schemas"]["Edge"][];
    };
    /** HFAudioClassification */
    HFAudioClassification: {
      /**
       * Type
       * @default hf.audio_classification
       * @constant
       * @enum {string}
       */
      type?: "hf.audio_classification";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFAudioToAudio */
    HFAudioToAudio: {
      /**
       * Type
       * @default hf.audio_to_audio
       * @constant
       * @enum {string}
       */
      type?: "hf.audio_to_audio";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFAutomaticSpeechRecognition */
    HFAutomaticSpeechRecognition: {
      /**
       * Type
       * @default hf.automatic_speech_recognition
       * @constant
       * @enum {string}
       */
      type?: "hf.automatic_speech_recognition";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFComputerVision */
    HFComputerVision: {
      /**
       * Type
       * @default hf.computer_vision
       * @constant
       * @enum {string}
       */
      type?: "hf.computer_vision";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFDepthEstimation */
    HFDepthEstimation: {
      /**
       * Type
       * @default hf.depth_estimation
       * @constant
       * @enum {string}
       */
      type?: "hf.depth_estimation";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFDocumentQuestionAnswering */
    HFDocumentQuestionAnswering: {
      /**
       * Type
       * @default hf.document_question_answering
       * @constant
       * @enum {string}
       */
      type?: "hf.document_question_answering";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFFeatureExtraction */
    HFFeatureExtraction: {
      /**
       * Type
       * @default hf.feature_extraction
       * @constant
       * @enum {string}
       */
      type?: "hf.feature_extraction";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFFileInfo */
    HFFileInfo: {
      /** Size */
      size: number;
      /** Repo Id */
      repo_id: string;
      /** Path */
      path: string;
    };
    /** HFFileRequest */
    HFFileRequest: {
      /** Repo Id */
      repo_id: string;
      /** Path */
      path: string;
    };
    /** HFFillMask */
    HFFillMask: {
      /**
       * Type
       * @default hf.fill_mask
       * @constant
       * @enum {string}
       */
      type?: "hf.fill_mask";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFImageClassification */
    HFImageClassification: {
      /**
       * Type
       * @default hf.image_classification
       * @constant
       * @enum {string}
       */
      type?: "hf.image_classification";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFImageFeatureExtraction */
    HFImageFeatureExtraction: {
      /**
       * Type
       * @default hf.image_feature_extraction
       * @constant
       * @enum {string}
       */
      type?: "hf.image_feature_extraction";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFImageSegmentation */
    HFImageSegmentation: {
      /**
       * Type
       * @default hf.image_segmentation
       * @constant
       * @enum {string}
       */
      type?: "hf.image_segmentation";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFImageTextToText */
    HFImageTextToText: {
      /**
       * Type
       * @default hf.image_text_to_text
       * @constant
       * @enum {string}
       */
      type?: "hf.image_text_to_text";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFImageTo3D */
    HFImageTo3D: {
      /**
       * Type
       * @default hf.image_to_3d
       * @constant
       * @enum {string}
       */
      type?: "hf.image_to_3d";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFImageToImage */
    HFImageToImage: {
      /**
       * Type
       * @default hf.image_to_image
       * @constant
       * @enum {string}
       */
      type?: "hf.image_to_image";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFImageToText */
    HFImageToText: {
      /**
       * Type
       * @default hf.image_to_text
       * @constant
       * @enum {string}
       */
      type?: "hf.image_to_text";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFImageToVideo */
    HFImageToVideo: {
      /**
       * Type
       * @default hf.image_to_video
       * @constant
       * @enum {string}
       */
      type?: "hf.image_to_video";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFMaskGeneration */
    HFMaskGeneration: {
      /**
       * Type
       * @default hf.mask_generation
       * @constant
       * @enum {string}
       */
      type?: "hf.mask_generation";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFNaturalLanguageProcessing */
    HFNaturalLanguageProcessing: {
      /**
       * Type
       * @default hf.natural_language_processing
       * @constant
       * @enum {string}
       */
      type?: "hf.natural_language_processing";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFObjectDetection */
    HFObjectDetection: {
      /**
       * Type
       * @default hf.object_detection
       * @constant
       * @enum {string}
       */
      type?: "hf.object_detection";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFQuestionAnswering */
    HFQuestionAnswering: {
      /**
       * Type
       * @default hf.question_answering
       * @constant
       * @enum {string}
       */
      type?: "hf.question_answering";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFSentenceSimilarity */
    HFSentenceSimilarity: {
      /**
       * Type
       * @default hf.sentence_similarity
       * @constant
       * @enum {string}
       */
      type?: "hf.sentence_similarity";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFStableDiffusion */
    HFStableDiffusion: {
      /**
       * Type
       * @default hf.stable_diffusion
       * @constant
       * @enum {string}
       */
      type?: "hf.stable_diffusion";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFStableDiffusionXL */
    HFStableDiffusionXL: {
      /**
       * Type
       * @default hf.stable_diffusion_xl
       * @constant
       * @enum {string}
       */
      type?: "hf.stable_diffusion_xl";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFSummarization */
    HFSummarization: {
      /**
       * Type
       * @default hf.summarization
       * @constant
       * @enum {string}
       */
      type?: "hf.summarization";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFTableQuestionAnswering */
    HFTableQuestionAnswering: {
      /**
       * Type
       * @default hf.table_question_answering
       * @constant
       * @enum {string}
       */
      type?: "hf.table_question_answering";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFText2TextGeneration */
    HFText2TextGeneration: {
      /**
       * Type
       * @default hf.text2text_generation
       * @constant
       * @enum {string}
       */
      type?: "hf.text2text_generation";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFTextClassification */
    HFTextClassification: {
      /**
       * Type
       * @default hf.text_classification
       * @constant
       * @enum {string}
       */
      type?: "hf.text_classification";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFTextGeneration */
    HFTextGeneration: {
      /**
       * Type
       * @default hf.text_generation
       * @constant
       * @enum {string}
       */
      type?: "hf.text_generation";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFTextTo3D */
    HFTextTo3D: {
      /**
       * Type
       * @default hf.text_to_3d
       * @constant
       * @enum {string}
       */
      type?: "hf.text_to_3d";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFTextToAudio */
    HFTextToAudio: {
      /**
       * Type
       * @default hf.text_to_audio
       * @constant
       * @enum {string}
       */
      type?: "hf.text_to_audio";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFTextToImage */
    HFTextToImage: {
      /**
       * Type
       * @default hf.text_to_image
       * @constant
       * @enum {string}
       */
      type?: "hf.text_to_image";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFTextToSpeech */
    HFTextToSpeech: {
      /**
       * Type
       * @default hf.text_to_speech
       * @constant
       * @enum {string}
       */
      type?: "hf.text_to_speech";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFTextToVideo */
    HFTextToVideo: {
      /**
       * Type
       * @default hf.text_to_video
       * @constant
       * @enum {string}
       */
      type?: "hf.text_to_video";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFTokenClassification */
    HFTokenClassification: {
      /**
       * Type
       * @default hf.token_classification
       * @constant
       * @enum {string}
       */
      type?: "hf.token_classification";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFTranslation */
    HFTranslation: {
      /**
       * Type
       * @default hf.translation
       * @constant
       * @enum {string}
       */
      type?: "hf.translation";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFUnconditionalImageGeneration */
    HFUnconditionalImageGeneration: {
      /**
       * Type
       * @default hf.unconditional_image_generation
       * @constant
       * @enum {string}
       */
      type?: "hf.unconditional_image_generation";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFVideoClassification */
    HFVideoClassification: {
      /**
       * Type
       * @default hf.video_classification
       * @constant
       * @enum {string}
       */
      type?: "hf.video_classification";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFVideoTextToText */
    HFVideoTextToText: {
      /**
       * Type
       * @default hf.video_text_to_text
       * @constant
       * @enum {string}
       */
      type?: "hf.video_text_to_text";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFVisualQuestionAnswering */
    HFVisualQuestionAnswering: {
      /**
       * Type
       * @default hf.visual_question_answering
       * @constant
       * @enum {string}
       */
      type?: "hf.visual_question_answering";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFVoiceActivityDetection */
    HFVoiceActivityDetection: {
      /**
       * Type
       * @default hf.voice_activity_detection
       * @constant
       * @enum {string}
       */
      type?: "hf.voice_activity_detection";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFZeroShotAudioClassification */
    HFZeroShotAudioClassification: {
      /**
       * Type
       * @default hf.zero_shot_audio_classification
       * @constant
       * @enum {string}
       */
      type?: "hf.zero_shot_audio_classification";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFZeroShotClassification */
    HFZeroShotClassification: {
      /**
       * Type
       * @default hf.zero_shot_classification
       * @constant
       * @enum {string}
       */
      type?: "hf.zero_shot_classification";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFZeroShotImageClassification */
    HFZeroShotImageClassification: {
      /**
       * Type
       * @default hf.zero_shot_image_classification
       * @constant
       * @enum {string}
       */
      type?: "hf.zero_shot_image_classification";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HFZeroShotObjectDetection */
    HFZeroShotObjectDetection: {
      /**
       * Type
       * @default hf.zero_shot_object_detection
       * @constant
       * @enum {string}
       */
      type?: "hf.zero_shot_object_detection";
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** HelpRequest */
    HelpRequest: {
      /** Messages */
      messages: components["schemas"]["Message-Input"][];
      /** Available Tutorials */
      available_tutorials: string[];
    };
    /** HuggingFaceModel */
    HuggingFaceModel: {
      /**
       * Type
       * @default hf.model
       */
      type?: string;
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /** Path */
      path?: string | null;
      /** Allow Patterns */
      allow_patterns?: string[] | null;
      /** Ignore Patterns */
      ignore_patterns?: string[] | null;
    };
    /**
     * ImageRef
     * @description A reference to an image asset.
     */
    ImageRef: {
      /**
       * Type
       * @default image
       * @constant
       * @enum {string}
       */
      type?: "image";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Data */
      data?: string | string[] | null;
    };
    /** Job */
    Job: {
      /** Id */
      id: string;
      /** Job Type */
      job_type: string;
      /** Status */
      status: string;
      /** Workflow Id */
      workflow_id: string;
      /** Started At */
      started_at: string;
      /** Finished At */
      finished_at: string | null;
      /** Error */
      error: string | null;
      /** Cost */
      cost: number | null;
    };
    /** JobList */
    JobList: {
      /** Next */
      next: string | null;
      /** Jobs */
      jobs: components["schemas"]["Job"][];
    };
    /** JobUpdate */
    JobUpdate: {
      /**
       * Type
       * @default job_update
       * @constant
       * @enum {string}
       */
      type?: "job_update";
      /** Status */
      status: string;
      /** Job Id */
      job_id?: string | null;
      /** Message */
      message?: string | null;
      /** Result */
      result?: Record<string, never> | null;
      /** Error */
      error?: string | null;
    };
    /** LlamaModel */
    LlamaModel: {
      /**
       * Type
       * @default llama_model
       * @constant
       * @enum {string}
       */
      type?: "llama_model";
      /**
       * Name
       * @default
       */
      name?: string;
      /**
       * Repo Id
       * @default
       */
      repo_id?: string;
      /**
       * Modified At
       * @default
       */
      modified_at?: string;
      /**
       * Size
       * @default 0
       */
      size?: number;
      /**
       * Digest
       * @default
       */
      digest?: string;
      /** Details */
      details?: Record<string, never>;
    };
    /**
     * Message
     * @description Abstract representation for a chat message.
     * Independent of the underlying chat system, such as OpenAI or Anthropic.
     */
    "Message-Input": {
      /**
       * Type
       * @default message
       */
      type?: string;
      /** Id */
      id?: string | null;
      /** Auth Token */
      auth_token?: string | null;
      /** Workflow Id */
      workflow_id?: string | null;
      graph?: components["schemas"]["Graph"] | null;
      /** Thread Id */
      thread_id?: string | null;
      /** User Id */
      user_id?: string | null;
      /** Tool Call Id */
      tool_call_id?: string | null;
      /**
       * Role
       * @default
       */
      role?: string;
      /**
       * Name
       * @default
       */
      name?: string;
      /** Content */
      content?: string | ((components["schemas"]["MessageTextContent"] | components["schemas"]["MessageImageContent"] | components["schemas"]["MessageAudioContent"] | components["schemas"]["MessageVideoContent"])[]) | null;
      /** Tool Calls */
      tool_calls?: components["schemas"]["ToolCall"][] | null;
      /** Created At */
      created_at?: string | null;
    };
    /**
     * Message
     * @description Abstract representation for a chat message.
     * Independent of the underlying chat system, such as OpenAI or Anthropic.
     */
    "Message-Output": {
      /**
       * Type
       * @default message
       */
      type?: string;
      /** Id */
      id?: string | null;
      /** Auth Token */
      auth_token?: string | null;
      /** Workflow Id */
      workflow_id?: string | null;
      graph?: components["schemas"]["Graph"] | null;
      /** Thread Id */
      thread_id?: string | null;
      /** User Id */
      user_id?: string | null;
      /** Tool Call Id */
      tool_call_id?: string | null;
      /**
       * Role
       * @default
       */
      role?: string;
      /**
       * Name
       * @default
       */
      name?: string;
      /** Content */
      content?: string | ((components["schemas"]["MessageTextContent"] | components["schemas"]["MessageImageContent"] | components["schemas"]["MessageAudioContent"] | components["schemas"]["MessageVideoContent"])[]) | null;
      /** Tool Calls */
      tool_calls?: components["schemas"]["ToolCall"][] | null;
      /** Created At */
      created_at?: string | null;
    };
    /** MessageAudioContent */
    MessageAudioContent: {
      /**
       * Type
       * @default audio
       * @constant
       * @enum {string}
       */
      type?: "audio";
      /**
       * @default {
       *   "type": "audio",
       *   "uri": ""
       * }
       */
      audio?: components["schemas"]["AudioRef"];
    };
    /** MessageCreateRequest */
    MessageCreateRequest: {
      /** Thread Id */
      thread_id?: string | null;
      /** User Id */
      user_id?: string | null;
      /** Tool Call Id */
      tool_call_id?: string | null;
      /**
       * Role
       * @default
       */
      role?: string;
      /**
       * Name
       * @default
       */
      name?: string;
      /** Content */
      content?: string | ((components["schemas"]["MessageTextContent"] | components["schemas"]["MessageImageContent"] | components["schemas"]["MessageAudioContent"] | components["schemas"]["MessageVideoContent"])[]) | null;
      /** Tool Calls */
      tool_calls?: components["schemas"]["ToolCall"][] | null;
      /** Created At */
      created_at?: string | null;
      workflow?: components["schemas"]["Workflow-Input"] | null;
    };
    /** MessageImageContent */
    MessageImageContent: {
      /**
       * Type
       * @default image_url
       * @constant
       * @enum {string}
       */
      type?: "image_url";
      /**
       * @default {
       *   "type": "image",
       *   "uri": ""
       * }
       */
      image?: components["schemas"]["ImageRef"];
    };
    /** MessageList */
    MessageList: {
      /** Next */
      next: string | null;
      /** Messages */
      messages: components["schemas"]["Message-Output"][];
    };
    /** MessageTextContent */
    MessageTextContent: {
      /**
       * Type
       * @default text
       * @constant
       * @enum {string}
       */
      type?: "text";
      /**
       * Text
       * @default
       */
      text?: string;
    };
    /** MessageVideoContent */
    MessageVideoContent: {
      /**
       * Type
       * @default video
       * @constant
       * @enum {string}
       */
      type?: "video";
      /**
       * @default {
       *   "type": "video",
       *   "uri": ""
       * }
       */
      video?: components["schemas"]["VideoRef"];
    };
    /** ModelFile */
    ModelFile: {
      /** Type */
      type: string;
      /**
       * Name
       * @default
       */
      name?: string;
    };
    /** ModelInfo */
    ModelInfo: {
      /** Id */
      id: string;
      /** Modelid */
      modelId: string;
      /** Author */
      author: string;
      /** Sha */
      sha: string;
      /**
       * Lastmodified
       * Format: date-time
       */
      lastModified: string;
      /** Private */
      private: boolean;
      /** Disabled */
      disabled: boolean;
      /** Gated */
      gated: boolean | string;
      /** Pipeline Tag */
      pipeline_tag?: string | null;
      /** Tags */
      tags: string[];
      /** Downloads */
      downloads: number;
      /** Library Name */
      library_name?: string | null;
      /** Likes */
      likes: number;
      /** Model-Index */
      "model-index"?: unknown;
      /** Config */
      config?: Record<string, never> | null;
      /** Carddata */
      cardData?: Record<string, never> | null;
      /** Siblings */
      siblings?: components["schemas"]["Sibling"][] | null;
      /** Spaces */
      spaces?: string[] | null;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt: string;
    };
    /** ModelRef */
    ModelRef: {
      /**
       * Type
       * @default model_ref
       * @constant
       * @enum {string}
       */
      type?: "model_ref";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Data */
      data?: string | string[] | null;
    };
    /** Node */
    Node: {
      /** Id */
      id: string;
      /** Parent Id */
      parent_id?: string | null;
      /**
       * Type
       * @default default
       */
      type?: string;
      /**
       * Data
       * @default {}
       */
      data?: unknown;
      /**
       * Ui Properties
       * @default {}
       */
      ui_properties?: unknown;
    };
    /**
     * NodeMetadata
     * @description Metadata for a node.
     */
    NodeMetadata: {
      /** Title */
      title: string;
      /** Description */
      description: string;
      /** Namespace */
      namespace: string;
      /** Node Type */
      node_type: string;
      /** Layout */
      layout: string;
      /** Properties */
      properties: components["schemas"]["Property"][];
      /** Outputs */
      outputs: components["schemas"]["OutputSlot"][];
      /** The Model Info */
      the_model_info: Record<string, never>;
      /** Recommended Models */
      recommended_models: components["schemas"]["HuggingFaceModel"][];
    };
    /** NodeProgress */
    NodeProgress: {
      /**
       * Type
       * @default node_progress
       * @constant
       * @enum {string}
       */
      type?: "node_progress";
      /** Node Id */
      node_id: string;
      /** Progress */
      progress: number;
      /** Total */
      total: number;
    };
    /** NodeRef */
    NodeRef: {
      /**
       * Type
       * @default node
       * @constant
       * @enum {string}
       */
      type?: "node";
      /**
       * Id
       * @default
       */
      id?: string;
    };
    /** NodeUpdate */
    NodeUpdate: {
      /**
       * Type
       * @default node_update
       * @constant
       * @enum {string}
       */
      type?: "node_update";
      /** Node Id */
      node_id: string;
      /** Node Name */
      node_name: string;
      /** Status */
      status: string;
      /** Error */
      error?: string | null;
      /** Logs */
      logs?: string | null;
      /** Result */
      result?: Record<string, never> | null;
      /** Properties */
      properties?: Record<string, never> | null;
    };
    /** OAuthAuthorizeRequest */
    OAuthAuthorizeRequest: {
      provider: components["schemas"]["OAuthProvider"];
      /** State */
      state: string;
      /** Authorization Response */
      authorization_response: string;
      /** Redirect Uri */
      redirect_uri: string;
    };
    /** OAuthLoginRequest */
    OAuthLoginRequest: {
      /** Redirect Uri */
      redirect_uri: string;
      provider: components["schemas"]["OAuthProvider"];
    };
    /** OAuthLoginResponse */
    OAuthLoginResponse: {
      /** Url */
      url: string;
      /** State */
      state: string;
    };
    /**
     * OAuthProvider
     * @enum {string}
     */
    OAuthProvider: "google" | "facebook";
    /**
     * OutputSlot
     * @description An output slot is a slot that can be connected to an input slot.
     */
    OutputSlot: {
      type: components["schemas"]["TypeMetadata"];
      /** Name */
      name: string;
      /**
       * Stream
       * @default false
       */
      stream?: boolean;
    };
    /**
     * Prediction
     * @description A prediction made by a remote model.
     */
    Prediction: {
      /**
       * Type
       * @default prediction
       * @constant
       * @enum {string}
       */
      type?: "prediction";
      /** Id */
      id: string;
      /** User Id */
      user_id: string;
      /** Node Id */
      node_id: string;
      /** Workflow Id */
      workflow_id?: string | null;
      /** Provider */
      provider?: string | null;
      /** Model */
      model?: string | null;
      /** Version */
      version?: string | null;
      /** Node Type */
      node_type?: string | null;
      /** Status */
      status: string;
      /**
       * Params
       * @default {}
       */
      params?: Record<string, never>;
      /** Data */
      data?: unknown;
      /** Cost */
      cost?: number | null;
      /** Logs */
      logs?: string | null;
      /** Error */
      error?: string | null;
      /** Duration */
      duration?: number | null;
      /** Created At */
      created_at?: string | null;
      /** Started At */
      started_at?: string | null;
      /** Completed At */
      completed_at?: string | null;
    };
    /**
     * PredictionCreateRequest
     * @description The request body for creating a prediction.
     */
    PredictionCreateRequest: {
      provider: components["schemas"]["Provider"];
      /** Model */
      model: string;
      /** Node Id */
      node_id: string;
      /**
       * Params
       * @default {}
       */
      params?: Record<string, never>;
      /** Version */
      version?: string | null;
      /** Workflow Id */
      workflow_id?: string | null;
    };
    /** PredictionList */
    PredictionList: {
      /** Next */
      next: string | null;
      /** Predictions */
      predictions: components["schemas"]["Prediction"][];
    };
    /**
     * Property
     * @description Property of a node.
     */
    Property: {
      /** Name */
      name: string;
      type: components["schemas"]["TypeMetadata"];
      /** Default */
      default?: unknown;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Min */
      min?: number | null;
      /** Max */
      max?: number | null;
    };
    /**
     * Provider
     * @enum {string}
     */
    Provider: "aime" | "openai" | "anthropic" | "replicate" | "huggingface" | "ollama" | "comfy" | "local" | "empty";
    /** RepoPath */
    RepoPath: {
      /** Repo Id */
      repo_id: string;
      /** Path */
      path: string;
      /**
       * Downloaded
       * @default false
       */
      downloaded?: boolean;
    };
    /** RunJobRequest */
    RunJobRequest: {
      /**
       * Type
       * @default run_job_request
       * @constant
       * @enum {string}
       */
      type?: "run_job_request";
      /**
       * Job Type
       * @default workflow
       */
      job_type?: string;
      /** Params */
      params?: unknown;
      /** Messages */
      messages?: components["schemas"]["Message-Input"][] | null;
      /**
       * Workflow Id
       * @default
       */
      workflow_id?: string;
      /**
       * User Id
       * @default
       */
      user_id?: string;
      /**
       * Auth Token
       * @default
       */
      auth_token?: string;
      /** Api Url */
      api_url?: string | null;
      /** Env */
      env?: Record<string, never> | null;
      graph?: components["schemas"]["Graph"] | null;
      /**
       * Explicit Types
       * @default false
       */
      explicit_types?: boolean;
    };
    /**
     * SVGElement
     * @description Base type for SVG elements that can be combined.
     */
    SVGElement: {
      /**
       * Type
       * @default svg_element
       * @constant
       * @enum {string}
       */
      type?: "svg_element";
      /**
       * Name
       * @default
       */
      name?: string;
      /**
       * Attributes
       * @default {}
       */
      attributes?: {
        [key: string]: string;
      };
      /**
       * Content
       * @default
       */
      content?: string;
      /** Children */
      children?: components["schemas"]["SVGElement"][];
    };
    /** SecretsModel */
    SecretsModel: {
      /**
       * Openai Api Key
       * @description OpenAI API key
       */
      OPENAI_API_KEY?: string | null;
      /**
       * Anthropic Api Key
       * @description ANTHROPIC API key
       */
      ANTHROPIC_API_KEY?: string | null;
      /**
       * Hf Token
       * @description Hugging Face Token
       */
      HF_TOKEN?: string | null;
      /**
       * Replicate Api Token
       * @description Replicate API Token
       */
      REPLICATE_API_TOKEN?: string | null;
      /**
       * Kling Access Key
       * @description Kling AI access key
       */
      KLING_ACCESS_KEY?: string | null;
      /**
       * Kling Secret Key
       * @description Kling AI secret key
       */
      KLING_SECRET_KEY?: string | null;
      /**
       * Lumaai Api Key
       * @description Luma AI API key
       */
      LUMAAI_API_KEY?: string | null;
      /**
       * Aime User
       * @description Aime user
       */
      AIME_USER?: string | null;
      /**
       * Aime Api Key
       * @description Aime API key
       */
      AIME_API_KEY?: string | null;
    };
    /** SettingsModel */
    SettingsModel: {
      /**
       * Comfy Folder
       * @description Location of ComfyUI folder
       */
      COMFY_FOLDER?: string | null;
      /**
       * Chroma Path
       * @description Location of ChromaDB folder
       */
      CHROMA_PATH?: string | null;
      /**
       * Asset Folder
       * @description Location of asset folder
       */
      ASSET_FOLDER?: string | null;
    };
    /** SettingsResponse */
    SettingsResponse: {
      settings: components["schemas"]["SettingsModel"];
      secrets: components["schemas"]["SecretsModel"];
    };
    /** SettingsUpdateRequest */
    SettingsUpdateRequest: {
      settings: components["schemas"]["SettingsModel"];
      secrets: components["schemas"]["SecretsModel"];
    };
    /** Sibling */
    Sibling: {
      /** Rfilename */
      rfilename: string;
    };
    /** SystemStats */
    SystemStats: {
      /**
       * Cpu Percent
       * @description CPU usage percentage
       */
      cpu_percent: number;
      /**
       * Memory Total Gb
       * @description Total memory in GB
       */
      memory_total_gb: number;
      /**
       * Memory Used Gb
       * @description Used memory in GB
       */
      memory_used_gb: number;
      /**
       * Memory Percent
       * @description Memory usage percentage
       */
      memory_percent: number;
      /**
       * Vram Total Gb
       * @description Total VRAM in GB
       */
      vram_total_gb?: number | null;
      /**
       * Vram Used Gb
       * @description Used VRAM in GB
       */
      vram_used_gb?: number | null;
      /**
       * Vram Percent
       * @description VRAM usage percentage
       */
      vram_percent?: number | null;
    };
    /** Task */
    Task: {
      /**
       * Type
       * @default task
       * @constant
       * @enum {string}
       */
      type?: "task";
      /**
       * Id
       * @default
       */
      id?: string;
      /**
       * Task Type
       * @default
       */
      task_type?: string;
      /**
       * User Id
       * @default
       */
      user_id?: string;
      /**
       * Thread Id
       * @default
       */
      thread_id?: string;
      /**
       * Status
       * @default
       */
      status?: string;
      /**
       * Name
       * @default
       */
      name?: string;
      /**
       * Instructions
       * @default
       */
      instructions?: string;
      /**
       * Dependencies
       * @default []
       */
      dependencies?: string[];
      /**
       * Started At
       * @default
       */
      started_at?: string;
      /** Finished At */
      finished_at?: string | null;
      /** Error */
      error?: string | null;
      /** Result */
      result?: string | null;
      /** Cost */
      cost?: number | null;
    };
    /** TaskCreateRequest */
    TaskCreateRequest: {
      /** Task Type */
      task_type: string;
      /** Thread Id */
      thread_id: string;
      /** Name */
      name: string;
      /** Instructions */
      instructions: string;
      /**
       * Dependencies
       * @default []
       */
      dependencies?: string[];
    };
    /** TaskList */
    TaskList: {
      /** Next */
      next: string | null;
      /** Tasks */
      tasks: components["schemas"]["Task"][];
    };
    /** TaskUpdateRequest */
    TaskUpdateRequest: {
      /** Status */
      status?: string | null;
      /** Error */
      error?: string | null;
      /** Result */
      result?: string | null;
      /** Cost */
      cost?: number | null;
      /** Started At */
      started_at?: string | null;
      /** Finished At */
      finished_at?: string | null;
    };
    /** Tensor */
    Tensor: {
      /**
       * Type
       * @default tensor
       * @constant
       * @enum {string}
       */
      type?: "tensor";
      /**
       * Value
       * @default []
       */
      value?: unknown[];
      /** Dtype */
      dtype?: string | null;
    };
    /** TextRef */
    TextRef: {
      /**
       * Type
       * @default text
       * @constant
       * @enum {string}
       */
      type?: "text";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Data */
      data?: string | string[] | null;
    };
    /** TokenResponse */
    TokenResponse: {
      /** Valid */
      valid: boolean;
    };
    /** ToolCall */
    ToolCall: {
      /**
       * Id
       * @default
       */
      id?: string;
      /**
       * Name
       * @default
       */
      name?: string;
      /**
       * Args
       * @default {}
       */
      args?: Record<string, never>;
      /** Result */
      result?: unknown;
    };
    /**
     * TypeMetadata
     * @description Metadata for a type.
     */
    TypeMetadata: {
      /** Type */
      type: string;
      /**
       * Optional
       * @default false
       */
      optional?: boolean;
      /** Values */
      values?: ((string | number)[]) | null;
      /**
       * Type Args
       * @default []
       */
      type_args?: components["schemas"]["TypeMetadata"][];
      /** Type Name */
      type_name?: string | null;
    };
    /** User */
    User: {
      /** Id */
      id: string;
      /** Permissions */
      permissions?: Record<string, never> | null;
      /**
       * Email
       * @default
       */
      email?: string;
      /**
       * Passcode
       * @default
       */
      passcode?: string;
      /** Auth Token */
      auth_token?: string | null;
      /** Verified At */
      verified_at?: string | null;
      /**
       * Passcode Valid
       * Format: date-time
       */
      passcode_valid?: string;
      /** Token Valid */
      token_valid?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Deleted At */
      deleted_at?: string | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** VideoRef */
    VideoRef: {
      /**
       * Type
       * @default video
       * @constant
       * @enum {string}
       */
      type?: "video";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Data */
      data?: string | string[] | null;
      /** Duration */
      duration?: number | null;
      /** Format */
      format?: string | null;
    };
    /** Workflow */
    "Workflow-Input": {
      /** Id */
      id: string;
      /**
       * User Id
       * @default
       */
      user_id?: string;
      /**
       * Access
       * @default private
       */
      access?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /**
       * Name
       * @default
       */
      name?: string;
      /** Tags */
      tags?: string[] | null;
      /**
       * Description
       * @default
       */
      description?: string | null;
      /** Thumbnail */
      thumbnail?: string | null;
      /** Graph */
      graph?: Record<string, never>;
    };
    /** Workflow */
    "Workflow-Output": {
      /** Id */
      id: string;
      /** Access */
      access: string;
      /** Created At */
      created_at: string;
      /** Updated At */
      updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Tags */
      tags?: string[] | null;
      /** Thumbnail */
      thumbnail?: string | null;
      /** Thumbnail Url */
      thumbnail_url?: string | null;
      graph: components["schemas"]["Graph"];
      /** Input Schema */
      input_schema?: Record<string, never> | null;
      /** Output Schema */
      output_schema?: Record<string, never> | null;
    };
    /** WorkflowList */
    WorkflowList: {
      /** Next */
      next: string | null;
      /** Workflows */
      workflows: components["schemas"]["Workflow-Output"][];
    };
    /** WorkflowRef */
    WorkflowRef: {
      /**
       * Type
       * @default workflow
       * @constant
       * @enum {string}
       */
      type?: "workflow";
      /**
       * Id
       * @default
       */
      id?: string;
    };
    /** WorkflowRequest */
    WorkflowRequest: {
      /** Name */
      name: string;
      /** Tags */
      tags?: string[] | null;
      /** Description */
      description?: string | null;
      /** Thumbnail */
      thumbnail?: string | null;
      /** Thumbnail Url */
      thumbnail_url?: string | null;
      /** Access */
      access: string;
      graph?: components["schemas"]["Graph"] | null;
      /** Comfy Workflow */
      comfy_workflow?: Record<string, never> | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Index
   * @description Returns all assets for a given user or workflow.
   */
  index_api_assets__get: {
    parameters: {
      query?: {
        parent_id?: string | null;
        content_type?: string | null;
        cursor?: string | null;
        page_size?: number | null;
        duration?: number | null;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssetList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create a new asset.
   */
  create_api_assets__post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body_create_api_assets__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get
   * @description Returns the asset for the given id.
   */
  get_api_assets__id__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update
   * @description Updates the asset for the given id.
   */
  update_api_assets__id__put: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete
   * @description Deletes the asset for the given id. If the asset is a folder, it deletes all contents recursively.
   */
  delete_api_assets__id__delete: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Download Assets
   * @description Create a ZIP file containing the requested assets and return it for download.
   * Maintains folder structure based on asset.parent_id relationships.
   */
  download_assets_api_assets_download_post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetDownloadRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Assets Recursive
   * @description Get all assets in a folder recursively, including the folder structure.
   */
  get_assets_recursive_api_assets__folder_id__recursive_get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        folder_id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get
   * @description Returns the status of a job.
   */
  get_api_jobs__id__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Job"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update
   * @description Update a job.
   */
  update_api_jobs__id__put: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Job"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Index
   * @description Returns all assets for a given user or workflow.
   */
  index_api_jobs__get: {
    parameters: {
      query?: {
        workflow_id?: string | null;
        cursor?: string | null;
        page_size?: number | null;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["JobList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_api_jobs__post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RunJobRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Run */
  run_api_jobs_run_post: {
    parameters: {
      query?: {
        stream?: boolean;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RunJobRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Oauth Login */
  oauth_login_api_auth_oauth_login_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OAuthLoginRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OAuthLoginResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Oauth Callback */
  oauth_callback_api_auth_oauth_callback_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OAuthAuthorizeRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Verify */
  verify_api_auth_verify_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TokenResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Index */
  index_api_messages__get: {
    parameters: {
      query: {
        thread_id: string;
        reverse?: boolean;
        cursor?: string | null;
        limit?: number;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MessageList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_api_messages__post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MessageCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Help */
  help_api_messages_help_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HelpRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message-Output"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get */
  get_api_messages__message_id__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        message_id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Recommended Models */
  recommended_models_api_models_recommended_models_get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HuggingFaceModel"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Huggingface Models */
  get_huggingface_models_api_models_huggingface_models_get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CachedModel"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Huggingface Model */
  delete_huggingface_model_api_models_huggingface_model_delete: {
    parameters: {
      query: {
        repo_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Ollama Models */
  get_ollama_models_api_models_ollama_models_get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LlamaModel"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Try Cache Files */
  try_cache_files_api_models_huggingface_try_cache_files_post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RepoPath"][];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RepoPath"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Ollama Model Info */
  get_ollama_model_info_api_models_ollama_model_info_get: {
    parameters: {
      query: {
        model_name: string;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never> | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Pull Ollama Model */
  pull_ollama_model_api_models_pull_ollama_model_post: {
    parameters: {
      query: {
        model_name: string;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get System Stats */
  get_system_stats_api_models_system_stats_get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SystemStats"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Huggingface File Info */
  get_huggingface_file_info_api_models_huggingface_file_info_post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HFFileRequest"][];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HFFileInfo"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Index */
  index_api_models__model_type__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        model_type: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ModelFile"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Dummy
   * @description Returns a dummy node.
   */
  dummy_api_nodes_dummy_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssetRef"] | components["schemas"]["AudioRef"] | components["schemas"]["DataframeRef"] | components["schemas"]["FolderRef"] | components["schemas"]["ImageRef"] | components["schemas"]["Tensor"] | components["schemas"]["VideoRef"] | components["schemas"]["ModelRef"] | components["schemas"]["TextRef"] | components["schemas"]["WorkflowRef"] | components["schemas"]["NodeRef"] | components["schemas"]["Prediction"] | components["schemas"]["JobUpdate"] | components["schemas"]["NodeUpdate"] | components["schemas"]["NodeProgress"] | components["schemas"]["HuggingFaceModel"] | components["schemas"]["HFImageTextToText"] | components["schemas"]["HFVisualQuestionAnswering"] | components["schemas"]["HFDocumentQuestionAnswering"] | components["schemas"]["HFVideoTextToText"] | components["schemas"]["HFComputerVision"] | components["schemas"]["HFDepthEstimation"] | components["schemas"]["HFImageClassification"] | components["schemas"]["HFObjectDetection"] | components["schemas"]["HFImageSegmentation"] | components["schemas"]["HFTextToImage"] | components["schemas"]["HFStableDiffusion"] | components["schemas"]["HFStableDiffusionXL"] | components["schemas"]["HFImageToText"] | components["schemas"]["HFImageToImage"] | components["schemas"]["HFImageToVideo"] | components["schemas"]["HFUnconditionalImageGeneration"] | components["schemas"]["HFVideoClassification"] | components["schemas"]["HFTextToVideo"] | components["schemas"]["HFZeroShotImageClassification"] | components["schemas"]["HFMaskGeneration"] | components["schemas"]["HFZeroShotObjectDetection"] | components["schemas"]["HFTextTo3D"] | components["schemas"]["HFImageTo3D"] | components["schemas"]["HFImageFeatureExtraction"] | components["schemas"]["HFNaturalLanguageProcessing"] | components["schemas"]["HFTextClassification"] | components["schemas"]["HFTokenClassification"] | components["schemas"]["HFTableQuestionAnswering"] | components["schemas"]["HFQuestionAnswering"] | components["schemas"]["HFZeroShotClassification"] | components["schemas"]["HFTranslation"] | components["schemas"]["HFSummarization"] | components["schemas"]["HFFeatureExtraction"] | components["schemas"]["HFTextGeneration"] | components["schemas"]["HFText2TextGeneration"] | components["schemas"]["HFFillMask"] | components["schemas"]["HFSentenceSimilarity"] | components["schemas"]["HFTextToSpeech"] | components["schemas"]["HFTextToAudio"] | components["schemas"]["HFAutomaticSpeechRecognition"] | components["schemas"]["HFAudioToAudio"] | components["schemas"]["HFAudioClassification"] | components["schemas"]["HFZeroShotAudioClassification"] | components["schemas"]["HFVoiceActivityDetection"] | components["schemas"]["SVGElement"] | Record<string, never>;
        };
      };
    };
  };
  /**
   * Metadata
   * @description Returns a list of all node metadata.
   */
  metadata_api_nodes_metadata_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["NodeMetadata"][];
        };
      };
    };
  };
  /**
   * Replicate Status
   * @description Returns the status of the Replicate model.
   */
  replicate_status_api_nodes_replicate_status_get: {
    parameters: {
      query: {
        node_type: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Index
   * @description Returns all assets for a given user or workflow.
   */
  index_api_predictions__get: {
    parameters: {
      query?: {
        cursor?: string | null;
        page_size?: number | null;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PredictionList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_api_predictions__post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PredictionCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get */
  get_api_predictions__id__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Prediction"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Index */
  index_api_workflows__get: {
    parameters: {
      query?: {
        cursor?: string | null;
        limit?: number;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_api_workflows__post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkflowRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Workflow-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Public */
  public_api_workflows_public_get: {
    parameters: {
      query?: {
        limit?: number;
        cursor?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Public Workflow */
  get_public_workflow_api_workflows_public__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Workflow-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** User Workflows */
  user_workflows_api_workflows_user__user_id__get: {
    parameters: {
      query?: {
        limit?: number;
        cursor?: string | null;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Examples */
  examples_api_workflows_examples_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowList"];
        };
      };
    };
  };
  /** Get Workflow */
  get_workflow_api_workflows__id__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Workflow-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Workflow */
  update_workflow_api_workflows__id__put: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkflowRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Workflow-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Workflow */
  delete_workflow_api_workflows__id__delete: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Save Example Workflow */
  save_example_workflow_api_workflows_examples__id__put: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkflowRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Workflow-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get
   * @description Returns the file as a stream for the given key, supporting range queries.
   */
  get_api_storage__bucket___key__get: {
    parameters: {
      path: {
        bucket: string;
        key: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update
   * @description Updates or creates the file for the given key.
   */
  update_api_storage__bucket___key__put: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        bucket: string;
        key: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete
   * @description Deletes the asset for the given key.
   */
  delete_api_storage__bucket___key__delete: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        bucket: string;
        key: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Head
   * @description Returns the metadata for the file with the given key.
   */
  head_api_storage__bucket___key__head: {
    parameters: {
      path: {
        bucket: string;
        key: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Index
   * @description Returns all tasks for the current user, optionally filtered by status.
   */
  index_api_tasks__get: {
    parameters: {
      query: {
        thread_id: string;
        cursor?: string | null;
        page_size?: number | null;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TaskList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Creates a new task.
   */
  create_api_tasks__post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get
   * @description Returns the task with the given id.
   */
  get_api_tasks__id__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update
   * @description Updates the task with the given id.
   */
  update_api_tasks__id__put: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete
   * @description Deletes the task with the given id.
   */
  delete_api_tasks__id__delete: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Settings */
  get_settings_api_settings__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SettingsResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Settings */
  update_settings_api_settings__put: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SettingsUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SettingsResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Health Check */
  health_check_health_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
}
