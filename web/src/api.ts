/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/assets/": {
    /**
     * Index
     * @description Returns all assets for a given user or workflow.
     */
    get: operations["index_api_assets__get"];
    /**
     * Create
     * @description Create a new asset.
     */
    post: operations["create_api_assets__post"];
  };
  "/api/assets/temp": {
    /**
     * Create Temp
     * @description Create a new temporary asset.
     */
    get: operations["create_temp_api_assets_temp_get"];
  };
  "/api/assets/{id}": {
    /**
     * Get
     * @description Returns the asset for the given id.
     */
    get: operations["get_api_assets__id__get"];
    /**
     * Update
     * @description Updates the asset for the given id.
     */
    put: operations["update_api_assets__id__put"];
    /**
     * Delete
     * @description Deletes the asset for the given id.
     */
    delete: operations["delete_api_assets__id__delete"];
  };
  "/api/jobs/{id}": {
    /**
     * Get
     * @description Returns the status of a job.
     */
    get: operations["get_api_jobs__id__get"];
    /**
     * Update
     * @description Update a job.
     */
    put: operations["update_api_jobs__id__put"];
  };
  "/api/jobs/": {
    /**
     * Index
     * @description Returns all assets for a given user or workflow.
     */
    get: operations["index_api_jobs__get"];
    /** Run */
    post: operations["run_api_jobs__post"];
  };
  "/api/auth/oauth/login": {
    /** Oauth Login */
    post: operations["oauth_login_api_auth_oauth_login_post"];
  };
  "/api/auth/oauth/callback": {
    /** Oauth Callback */
    post: operations["oauth_callback_api_auth_oauth_callback_post"];
  };
  "/api/auth/verify": {
    /** Verify */
    post: operations["verify_api_auth_verify_post"];
  };
  "/api/messages/": {
    /** Index */
    get: operations["index_api_messages__get"];
    /** Create */
    post: operations["create_api_messages__post"];
  };
  "/api/messages/{message_id}": {
    /** Get */
    get: operations["get_api_messages__message_id__get"];
  };
  "/api/nodes/dummy": {
    /**
     * Dummy
     * @description Returns a dummy node.
     */
    get: operations["dummy_api_nodes_dummy_get"];
  };
  "/api/nodes/metadata": {
    /**
     * Metadata
     * @description Returns a list of all node metadata.
     */
    get: operations["metadata_api_nodes_metadata_get"];
  };
  "/api/predictions/": {
    /**
     * Index
     * @description Returns all assets for a given user or workflow.
     */
    get: operations["index_api_predictions__get"];
    /** Create */
    post: operations["create_api_predictions__post"];
  };
  "/api/predictions/{id}": {
    /** Get */
    get: operations["get_api_predictions__id__get"];
  };
  "/api/workflows/": {
    /** Index */
    get: operations["index_api_workflows__get"];
    /** Create */
    post: operations["create_api_workflows__post"];
  };
  "/api/workflows/public": {
    /** Public */
    get: operations["public_api_workflows_public_get"];
  };
  "/api/workflows/public/{id}": {
    /** Get Public Workflow */
    get: operations["get_public_workflow_api_workflows_public__id__get"];
  };
  "/api/workflows/user/{user_id}": {
    /** User Workflows */
    get: operations["user_workflows_api_workflows_user__user_id__get"];
  };
  "/api/workflows/examples": {
    /** Examples */
    get: operations["examples_api_workflows_examples_get"];
  };
  "/api/workflows/{id}": {
    /** Get Workflow */
    get: operations["get_workflow_api_workflows__id__get"];
    /** Update Workflow */
    put: operations["update_workflow_api_workflows__id__put"];
    /** Delete Workflow */
    delete: operations["delete_workflow_api_workflows__id__delete"];
  };
  "/api/storage/{bucket}/{key}": {
    /**
     * Get
     * @description Returns the file as a stream for the given key.
     */
    get: operations["get_api_storage__bucket___key__get"];
    /**
     * Update
     * @description Updates or creates the file for the given key.
     */
    put: operations["update_api_storage__bucket___key__put"];
    /**
     * Delete
     * @description Deletes the asset for the given key.
     */
    delete: operations["delete_api_storage__bucket___key__delete"];
    /**
     * Head
     * @description Returns the metadata for the file with the given key.
     */
    head: operations["head_api_storage__bucket___key__head"];
  };
  "/api/tasks/": {
    /**
     * Index
     * @description Returns all tasks for the current user, optionally filtered by status.
     */
    get: operations["index_api_tasks__get"];
    /**
     * Create
     * @description Creates a new task.
     */
    post: operations["create_api_tasks__post"];
  };
  "/api/tasks/{id}": {
    /**
     * Get
     * @description Returns the task with the given id.
     */
    get: operations["get_api_tasks__id__get"];
    /**
     * Update
     * @description Updates the task with the given id.
     */
    put: operations["update_api_tasks__id__put"];
    /**
     * Delete
     * @description Deletes the task with the given id.
     */
    delete: operations["delete_api_tasks__id__delete"];
  };
  "/api/models/{folder}": {
    /** Index */
    get: operations["index_api_models__folder__get"];
  };
  "/health": {
    /** Health Check */
    get: operations["health_check_health_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Asset */
    Asset: {
      /** Id */
      id: string;
      /** User Id */
      user_id: string;
      /** Workflow Id */
      workflow_id: string | null;
      /** Parent Id */
      parent_id: string;
      /** Name */
      name: string;
      /** Status */
      status: string;
      /** Content Type */
      content_type: string;
      /** Created At */
      created_at: string;
      /** Get Url */
      get_url: string | null;
      /** Thumb Url */
      thumb_url: string | null;
      /** Duration */
      duration?: number | null;
    };
    /** AssetList */
    AssetList: {
      /** Next */
      next: string | null;
      /** Assets */
      assets: components["schemas"]["Asset"][];
    };
    /** AssetRef */
    AssetRef: {
      /**
       * Type
       * @default asset
       */
      type?: string;
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Temp Id */
      temp_id?: string | null;
    };
    /** AssetUpdateRequest */
    AssetUpdateRequest: {
      /** Name */
      name: string | null;
      /** Parent Id */
      parent_id: string | null;
      /** Status */
      status: string | null;
      /** Content Type */
      content_type: string | null;
      /** Duration */
      duration?: number | null;
    };
    /** AudioRef */
    AudioRef: {
      /**
       * Type
       * @default audio
       * @constant
       */
      type?: "audio";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Temp Id */
      temp_id?: string | null;
    };
    /** AuthRequest */
    AuthRequest: {
      /** Token */
      token: string;
    };
    /** Body_create_api_assets__post */
    Body_create_api_assets__post: {
      /** File */
      file?: string | null;
      /** Json */
      json?: string | null;
    };
    /** ColumnDef */
    ColumnDef: {
      /** Name */
      name: string;
      /** Data Type */
      data_type: "int" | "float" | "datetime" | "object";
    };
    /** DataframeRef */
    DataframeRef: {
      /**
       * Type
       * @default dataframe
       * @constant
       */
      type?: "dataframe";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Temp Id */
      temp_id?: string | null;
      /** Columns */
      columns?: components["schemas"]["ColumnDef"][] | null;
      /** Data */
      data?: unknown[][] | null;
    };
    /** Edge */
    Edge: {
      /** Id */
      id?: string | null;
      /** Source */
      source: string;
      /** Sourcehandle */
      sourceHandle: string;
      /** Target */
      target: string;
      /** Targethandle */
      targetHandle: string;
      /** Ui Properties */
      ui_properties?: {
        [key: string]: string;
      } | null;
    };
    /** FileRef */
    FileRef: {
      /**
       * Type
       * @default file
       * @constant
       */
      type?: "file";
    };
    /** FolderRef */
    FolderRef: {
      /**
       * Type
       * @default folder
       * @constant
       */
      type?: "folder";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Temp Id */
      temp_id?: string | null;
    };
    /** Graph */
    Graph: {
      /** Nodes */
      nodes: components["schemas"]["Node"][];
      /** Edges */
      edges: components["schemas"]["Edge"][];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * ImageRef
     * @description A reference to an image asset.
     */
    ImageRef: {
      /**
       * Type
       * @default image
       * @constant
       */
      type?: "image";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Temp Id */
      temp_id?: string | null;
    };
    /** ImageUrl */
    ImageUrl: {
      /**
       * Url
       * @default
       */
      url?: string;
    };
    /** Job */
    Job: {
      /** Id */
      id: string;
      /**
       * User Id
       * @default
       */
      user_id?: string;
      /**
       * Job Type
       * @default
       */
      job_type?: string;
      /**
       * Status
       * @default starting
       */
      status?: string;
      /**
       * Workflow Id
       * @default
       */
      workflow_id?: string;
      /**
       * Started At
       * Format: date-time
       */
      started_at?: string;
      /** Finished At */
      finished_at?: string | null;
      /** Graph */
      graph?: Record<string, never>;
      /** Error */
      error?: string | null;
      /** Cost */
      cost?: number | null;
    };
    /** JobList */
    JobList: {
      /** Next */
      next: string | null;
      /** Jobs */
      jobs: components["schemas"]["Job"][];
    };
    /** JobUpdate */
    JobUpdate: {
      /**
       * Type
       * @default job_update
       * @constant
       */
      type?: "job_update";
      /** Job Id */
      job_id: string;
      /** Status */
      status: string;
      /** Error */
      error?: string | null;
    };
    /** Message */
    Message: {
      /**
       * Type
       * @default message
       */
      type?: string;
      /** Id */
      id?: string | null;
      /** Thread Id */
      thread_id?: string | null;
      /** User Id */
      user_id?: string | null;
      /** Tool Call Id */
      tool_call_id?: string | null;
      /**
       * Role
       * @default
       */
      role?: string;
      /**
       * Name
       * @default
       */
      name?: string;
      /** Content */
      content?: string | ((components["schemas"]["MessageTextContent"] | components["schemas"]["MessageImageContent"])[]) | null;
      /** Tool Calls */
      tool_calls?: Record<string, never>[] | null;
      /** Created At */
      created_at?: string | null;
    };
    /** MessageCreateRequest */
    MessageCreateRequest: {
      /** Thread Id */
      thread_id?: string | null;
      /** User Id */
      user_id?: string | null;
      /** Tool Call Id */
      tool_call_id?: string | null;
      /**
       * Role
       * @default
       */
      role?: string;
      /**
       * Name
       * @default
       */
      name?: string;
      /** Content */
      content?: string | ((components["schemas"]["MessageTextContent"] | components["schemas"]["MessageImageContent"])[]) | null;
      /** Tool Calls */
      tool_calls?: Record<string, never>[] | null;
      /** Created At */
      created_at?: string | null;
    };
    /** MessageImageContent */
    MessageImageContent: {
      /**
       * Type
       * @default image_url
       * @constant
       */
      type?: "image_url";
      /**
       * @default {
       *   "url": ""
       * }
       */
      image_url?: components["schemas"]["ImageUrl"];
    };
    /** MessageList */
    MessageList: {
      /** Next */
      next: string | null;
      /** Messages */
      messages: components["schemas"]["Message"][];
    };
    /** MessageTextContent */
    MessageTextContent: {
      /**
       * Type
       * @default text
       * @constant
       */
      type?: "text";
      /**
       * Text
       * @default
       */
      text?: string;
    };
    /** ModelRef */
    ModelRef: {
      /**
       * Type
       * @default model_ref
       * @constant
       */
      type?: "model_ref";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Temp Id */
      temp_id?: string | null;
    };
    /** Node */
    Node: {
      /** Id */
      id: string;
      /** Parent Id */
      parent_id?: string | null;
      /**
       * Type
       * @default default
       */
      type?: string;
      /**
       * Data
       * @default {}
       */
      data?: unknown;
      /**
       * Ui Properties
       * @default {}
       */
      ui_properties?: unknown;
    };
    /**
     * NodeMetadata
     * @description Metadata for a node.
     */
    NodeMetadata: {
      /** Title */
      title: string;
      /** Description */
      description: string;
      /** Namespace */
      namespace: string;
      /** Node Type */
      node_type: string;
      /** Primary Field */
      primary_field: string | null;
      /** Secondary Field */
      secondary_field: string | null;
      /** Layout */
      layout: string;
      /** Properties */
      properties: components["schemas"]["Property"][];
      /** Outputs */
      outputs: components["schemas"]["OutputSlot"][];
      /** Model Info */
      model_info: Record<string, never>;
    };
    /** NodeProgress */
    NodeProgress: {
      /**
       * Type
       * @default node_progress
       * @constant
       */
      type?: "node_progress";
      /** Node Id */
      node_id: string;
      /** Progress */
      progress: number;
      /** Total */
      total: number;
    };
    /** NodeRef */
    NodeRef: {
      /**
       * Type
       * @default node
       * @constant
       */
      type?: "node";
      /**
       * Id
       * @default
       */
      id?: string;
    };
    /** NodeUpdate */
    NodeUpdate: {
      /**
       * Type
       * @default node_update
       * @constant
       */
      type?: "node_update";
      /** Node Id */
      node_id: string;
      /** Node Name */
      node_name: string;
      /** Status */
      status: string;
      /** Error */
      error?: string | null;
      /** Logs */
      logs?: string | null;
      /** Result */
      result?: Record<string, never> | null;
      /** Properties */
      properties?: Record<string, never> | null;
      /** Started At */
      started_at?: string | null;
      /** Completed At */
      completed_at?: string | null;
    };
    /** OAuthAuthorizeRequest */
    OAuthAuthorizeRequest: {
      provider: components["schemas"]["OAuthProvider"];
      /** State */
      state: string;
      /** Authorization Response */
      authorization_response: string;
      /** Redirect Uri */
      redirect_uri: string;
    };
    /** OAuthLoginRequest */
    OAuthLoginRequest: {
      /** Redirect Uri */
      redirect_uri: string;
      provider: components["schemas"]["OAuthProvider"];
    };
    /** OAuthLoginResponse */
    OAuthLoginResponse: {
      /** Url */
      url: string;
      /** State */
      state: string;
    };
    /**
     * OAuthProvider
     * @enum {string}
     */
    OAuthProvider: "google" | "facebook";
    /**
     * OutputSlot
     * @description An output slot is a slot that can be connected to an input slot.
     */
    OutputSlot: {
      type: components["schemas"]["TypeMetadata"];
      /** Name */
      name: string;
      /**
       * Stream
       * @default false
       */
      stream?: boolean;
    };
    /**
     * Prediction
     * @description A prediction made by a remote model.
     */
    Prediction: {
      /**
       * Type
       * @default prediction
       * @constant
       */
      type?: "prediction";
      /** Id */
      id: string;
      /** User Id */
      user_id: string;
      /** Node Id */
      node_id: string;
      /** Workflow Id */
      workflow_id?: string | null;
      /** Provider */
      provider?: string | null;
      /** Model */
      model?: string | null;
      /** Version */
      version?: string | null;
      /** Node Type */
      node_type?: string | null;
      /** Status */
      status: string;
      /** Logs */
      logs?: string | null;
      /** Error */
      error?: string | null;
      /** Duration */
      duration?: number | null;
      /** Created At */
      created_at?: string | null;
      /** Started At */
      started_at?: string | null;
      /** Completed At */
      completed_at?: string | null;
    };
    /**
     * PredictionCreateRequest
     * @description The request body for creating a prediction.
     */
    PredictionCreateRequest: {
      /** Provider */
      provider: string;
      /** Model */
      model: string;
      /** Node Id */
      node_id: string;
      /**
       * Params
       * @default {}
       */
      params?: Record<string, never>;
      /** Data */
      data?: string | null;
      /** Version */
      version?: string | null;
      /** Workflow Id */
      workflow_id?: string | null;
    };
    /** PredictionList */
    PredictionList: {
      /** Next */
      next: string | null;
      /** Predictions */
      predictions: components["schemas"]["Prediction"][];
    };
    /**
     * Property
     * @description Property of a node.
     */
    Property: {
      /** Name */
      name: string;
      type: components["schemas"]["TypeMetadata"];
      /** Default */
      default?: unknown;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Min */
      min?: number | null;
      /** Max */
      max?: number | null;
    };
    /** RunJobRequest */
    RunJobRequest: {
      /**
       * Type
       * @default run_job_request
       * @constant
       */
      type?: "run_job_request";
      /**
       * Job Type
       * @default workflow
       */
      job_type?: string;
      /** Params */
      params?: unknown;
      /**
       * Workflow Id
       * @default
       */
      workflow_id?: string;
      /**
       * User Id
       * @default
       */
      user_id?: string;
      /**
       * Auth Token
       * @default
       */
      auth_token?: string;
      /** Env */
      env?: Record<string, never> | null;
      graph?: components["schemas"]["Graph"] | null;
    };
    /** Task */
    Task: {
      /**
       * Type
       * @default task
       * @constant
       */
      type?: "task";
      /**
       * Id
       * @default
       */
      id?: string;
      /**
       * Task Type
       * @default
       */
      task_type?: string;
      /**
       * User Id
       * @default
       */
      user_id?: string;
      /**
       * Thread Id
       * @default
       */
      thread_id?: string;
      /**
       * Status
       * @default
       */
      status?: string;
      /**
       * Name
       * @default
       */
      name?: string;
      /**
       * Instructions
       * @default
       */
      instructions?: string;
      /**
       * Dependencies
       * @default []
       */
      dependencies?: string[];
      /**
       * Required Capabilities
       * @default []
       */
      required_capabilities?: string[];
      /**
       * Started At
       * @default
       */
      started_at?: string;
      /** Finished At */
      finished_at?: string | null;
      /** Error */
      error?: string | null;
      /** Result */
      result?: string | null;
      /** Cost */
      cost?: number | null;
    };
    /** TaskCreateRequest */
    TaskCreateRequest: {
      /** Task Type */
      task_type: string;
      /** Thread Id */
      thread_id: string;
      /** Name */
      name: string;
      /** Instructions */
      instructions: string;
      /**
       * Dependencies
       * @default []
       */
      dependencies?: string[];
      /**
       * Required Capabilities
       * @default []
       */
      required_capabilities?: string[];
    };
    /** TaskList */
    TaskList: {
      /** Next */
      next: string | null;
      /** Tasks */
      tasks: components["schemas"]["Task"][];
    };
    /** TaskUpdateRequest */
    TaskUpdateRequest: {
      /** Status */
      status?: string | null;
      /** Error */
      error?: string | null;
      /** Result */
      result?: string | null;
      /** Cost */
      cost?: number | null;
      /** Started At */
      started_at?: string | null;
      /** Finished At */
      finished_at?: string | null;
    };
    /** TempAsset */
    TempAsset: {
      /** Get Url */
      get_url: string;
      /** Put Url */
      put_url: string;
    };
    /** Tensor */
    Tensor: {
      /**
       * Type
       * @default tensor
       * @constant
       */
      type?: "tensor";
      /**
       * Value
       * @default []
       */
      value?: unknown[];
      /** Dtype */
      dtype?: string | null;
    };
    /** TextRef */
    TextRef: {
      /**
       * Type
       * @default text
       * @constant
       */
      type?: "text";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Temp Id */
      temp_id?: string | null;
    };
    /** TokenResponse */
    TokenResponse: {
      /** Valid */
      valid: boolean;
    };
    /**
     * TypeMetadata
     * @description Metadata for a type.
     */
    TypeMetadata: {
      /** Type */
      type: string;
      /**
       * Optional
       * @default false
       */
      optional?: boolean;
      /** Values */
      values?: ((string | number)[]) | null;
      /**
       * Type Args
       * @default []
       */
      type_args?: components["schemas"]["TypeMetadata"][];
      /** Type Name */
      type_name?: string | null;
    };
    /** User */
    User: {
      /** Id */
      id: string;
      /** Permissions */
      permissions?: Record<string, never> | null;
      /**
       * Email
       * @default
       */
      email?: string;
      /**
       * Passcode
       * @default
       */
      passcode?: string;
      /** Auth Token */
      auth_token?: string | null;
      /** Verified At */
      verified_at?: string | null;
      /**
       * Passcode Valid
       * Format: date-time
       */
      passcode_valid?: string;
      /** Token Valid */
      token_valid?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Deleted At */
      deleted_at?: string | null;
      /** Help Thread Id */
      help_thread_id?: string | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** VideoRef */
    VideoRef: {
      /**
       * Type
       * @default video
       * @constant
       */
      type?: "video";
      /**
       * Uri
       * @default
       */
      uri?: string;
      /** Asset Id */
      asset_id?: string | null;
      /** Temp Id */
      temp_id?: string | null;
      /** Duration */
      duration?: number | null;
      /** Format */
      format?: string | null;
    };
    /** Workflow */
    Workflow: {
      /** Id */
      id: string;
      /** Access */
      access: string;
      /** Created At */
      created_at: string;
      /** Updated At */
      updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Thumbnail */
      thumbnail?: string | null;
      /** Thumbnail Url */
      thumbnail_url?: string | null;
      graph: components["schemas"]["Graph"];
      /** Input Schema */
      input_schema?: Record<string, never> | null;
      /** Output Schema */
      output_schema?: Record<string, never> | null;
    };
    /** WorkflowList */
    WorkflowList: {
      /** Next */
      next: string | null;
      /** Workflows */
      workflows: components["schemas"]["Workflow"][];
    };
    /** WorkflowRef */
    WorkflowRef: {
      /**
       * Type
       * @default workflow
       * @constant
       */
      type?: "workflow";
      /**
       * Id
       * @default
       */
      id?: string;
    };
    /** WorkflowRequest */
    WorkflowRequest: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Thumbnail */
      thumbnail?: string | null;
      /** Access */
      access: string;
      graph?: components["schemas"]["Graph"] | null;
      /** Comfy Workflow */
      comfy_workflow?: Record<string, never> | null;
    };
    /** WorkflowUpdate */
    WorkflowUpdate: {
      /**
       * Type
       * @default workflow_update
       * @constant
       */
      type?: "workflow_update";
      /** Result */
      result: Record<string, never>;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Index
   * @description Returns all assets for a given user or workflow.
   */
  index_api_assets__get: {
    parameters: {
      query?: {
        parent_id?: string | null;
        content_type?: string | null;
        cursor?: string | null;
        page_size?: number | null;
        duration?: number | null;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssetList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create a new asset.
   */
  create_api_assets__post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body_create_api_assets__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Temp
   * @description Create a new temporary asset.
   */
  create_temp_api_assets_temp_get: {
    parameters: {
      query: {
        extension: string;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TempAsset"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get
   * @description Returns the asset for the given id.
   */
  get_api_assets__id__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update
   * @description Updates the asset for the given id.
   */
  update_api_assets__id__put: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete
   * @description Deletes the asset for the given id.
   */
  delete_api_assets__id__delete: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get
   * @description Returns the status of a job.
   */
  get_api_jobs__id__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Job"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update
   * @description Update a job.
   */
  update_api_jobs__id__put: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Job"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Index
   * @description Returns all assets for a given user or workflow.
   */
  index_api_jobs__get: {
    parameters: {
      query?: {
        workflow_id?: string | null;
        cursor?: string | null;
        page_size?: number | null;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["JobList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Run */
  run_api_jobs__post: {
    parameters: {
      query?: {
        execute?: boolean;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RunJobRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Oauth Login */
  oauth_login_api_auth_oauth_login_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OAuthLoginRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OAuthLoginResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Oauth Callback */
  oauth_callback_api_auth_oauth_callback_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OAuthAuthorizeRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Verify */
  verify_api_auth_verify_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TokenResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Index */
  index_api_messages__get: {
    parameters: {
      query: {
        thread_id: string;
        reverse?: boolean;
        cursor?: string | null;
        limit?: number;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MessageList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_api_messages__post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MessageCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get */
  get_api_messages__message_id__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        message_id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Dummy
   * @description Returns a dummy node.
   */
  dummy_api_nodes_dummy_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssetRef"] | components["schemas"]["AudioRef"] | components["schemas"]["DataframeRef"] | components["schemas"]["FolderRef"] | components["schemas"]["ImageRef"] | components["schemas"]["Tensor"] | components["schemas"]["VideoRef"] | components["schemas"]["FileRef"] | components["schemas"]["ModelRef"] | components["schemas"]["TextRef"] | components["schemas"]["WorkflowRef"] | components["schemas"]["NodeRef"] | components["schemas"]["Prediction"] | components["schemas"]["JobUpdate"] | components["schemas"]["NodeUpdate"] | components["schemas"]["NodeProgress"] | components["schemas"]["WorkflowUpdate"] | Record<string, never>;
        };
      };
    };
  };
  /**
   * Metadata
   * @description Returns a list of all node metadata.
   */
  metadata_api_nodes_metadata_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["NodeMetadata"][];
        };
      };
    };
  };
  /**
   * Index
   * @description Returns all assets for a given user or workflow.
   */
  index_api_predictions__get: {
    parameters: {
      query?: {
        cursor?: string | null;
        page_size?: number | null;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PredictionList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_api_predictions__post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PredictionCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get */
  get_api_predictions__id__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Prediction"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Index */
  index_api_workflows__get: {
    parameters: {
      query?: {
        cursor?: string | null;
        limit?: number;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_api_workflows__post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkflowRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Workflow"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Public */
  public_api_workflows_public_get: {
    parameters: {
      query?: {
        limit?: number;
        cursor?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Public Workflow */
  get_public_workflow_api_workflows_public__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Workflow"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** User Workflows */
  user_workflows_api_workflows_user__user_id__get: {
    parameters: {
      query?: {
        limit?: number;
        cursor?: string | null;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Examples */
  examples_api_workflows_examples_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowList"];
        };
      };
    };
  };
  /** Get Workflow */
  get_workflow_api_workflows__id__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Workflow"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Workflow */
  update_workflow_api_workflows__id__put: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkflowRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Workflow"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Workflow */
  delete_workflow_api_workflows__id__delete: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get
   * @description Returns the file as a stream for the given key.
   */
  get_api_storage__bucket___key__get: {
    parameters: {
      path: {
        bucket: string;
        key: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update
   * @description Updates or creates the file for the given key.
   */
  update_api_storage__bucket___key__put: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        bucket: string;
        key: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete
   * @description Deletes the asset for the given key.
   */
  delete_api_storage__bucket___key__delete: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        bucket: string;
        key: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Head
   * @description Returns the metadata for the file with the given key.
   */
  head_api_storage__bucket___key__head: {
    parameters: {
      path: {
        bucket: string;
        key: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Index
   * @description Returns all tasks for the current user, optionally filtered by status.
   */
  index_api_tasks__get: {
    parameters: {
      query: {
        thread_id: string;
        cursor?: string | null;
        page_size?: number | null;
      };
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TaskList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Creates a new task.
   */
  create_api_tasks__post: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get
   * @description Returns the task with the given id.
   */
  get_api_tasks__id__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update
   * @description Updates the task with the given id.
   */
  update_api_tasks__id__put: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete
   * @description Deletes the task with the given id.
   */
  delete_api_tasks__id__delete: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        id: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Index */
  index_api_models__folder__get: {
    parameters: {
      header?: {
        authorization?: string | null;
      };
      path: {
        folder: string;
      };
      cookie?: {
        auth_cookie?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Health Check */
  health_check_health_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
}
