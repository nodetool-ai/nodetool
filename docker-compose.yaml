services:
  api:
    container_name: nodetool-api
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      ENV: ${ENV:-development}
      ASSET_BUCKET: ${ASSET_BUCKET}
      TEMP_BUCKET: ${TEMP_BUCKET}
      ASSET_DOMAIN: ${ASSET_DOMAIN}
      TEMP_DOMAIN: ${TEMP_DOMAIN}
      S3_ENDPOINT_URL: ${S3_ENDPOINT_URL}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_REGION: ${S3_REGION}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      REPLICATE_API_TOKEN: ${REPLICATE_API_TOKEN}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      HF_TOKEN: ${HF_TOKEN}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      # - WORKER_URL=https://georgi--nodetool-worker-predict.modal.run
  # worker:
  #   image: ghcr.io/georgi/nodetool-worker
  #   container_name: worker
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.worker
  #   ports:
  #     - "8888:8888"
  #   volumes:
  #     - type: bind
  #       source: src/nodetool
  #       target: /app/nodetool
  #     - type: bind
  #       source: comfy-models
  #       target: /root/data/models
  #     - type: bind
  #       source: ~/.cache/huggingface
  #       target: /app/huggingface_cache
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   environment:
  # chromadb:
  #   container_name: chroma
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.chroma
  #   ports:
  #     - "5000:8000"
  #   volumes:
  #     - type: bind
  #       source: chroma
  #       target: /chroma/chroma
  #   environment:
  #     - CHROMA_SERVER_AUTH_CREDENTIALS=chroma-token
  #     - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.token.TokenConfigServerAuthCredentialsProvider
  #     - CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER=AUTHORIZATION
  #     - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.token.TokenAuthServerProvider
  # postgres:
  #   image: postgres:16.3
  #   container_name: postgres
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   restart: unless-stopped
  # minio:
  #   container_name: minio
  #   image: minio/minio
  #   ports:
  #     - "9000:9000"
  #     - "9001:9001"
  #   volumes:
  #     - type: bind
  #       source: minio
  #       target: /data
  #   environment:
  #     MINIO_ROOT_USER: minio
  #     MINIO_ROOT_PASSWORD: minio123
  #     MINIO_VOLUMES: /data
  #   command: server --console-address ":9001"

volumes:
  postgres_data: